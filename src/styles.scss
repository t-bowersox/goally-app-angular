// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use "@angular/material" as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$light-primary: mat.define-palette(mat.$blue-palette, 700, 300, 900);
$light-accent: mat.define-palette(mat.$grey-palette, 600, 200, 800);

$dark-primary: mat.define-palette(mat.$blue-palette, 300, 50, 700);
$dark-accent: mat.define-palette(mat.$grey-palette, 300, 50, 700);

// The warn palette is optional (defaults to red).
$light-warn: mat.define-palette(mat.$red-palette, 700, 300, 900);
$dark-warn: mat.define-palette(mat.$red-palette, 300, 50, 700);

$typography-config: mat.define-typography-config();

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$light-theme: mat.define-light-theme(
  (
    color: (
      primary: $light-primary,
      accent: $light-accent,
      warn: $light-warn,
    ),
    typography: $typography-config,
  )
);
$dark-theme: mat.define-dark-theme(
  (
    color: (
      primary: $dark-primary,
      accent: $dark-accent,
      warn: $dark-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.

// Keep file size down: only include CSS for the components we're using.
// See theme modules: node_modules/@angular/material/_index.scss
// Instead of: @include mat.all-component-themes($light-theme);
@include mat.core-theme($light-theme);
@include mat.ripple-theme($light-theme);
@include mat.button-theme($light-theme);
@include mat.divider-theme($light-theme);
@include mat.form-field-theme($light-theme);
@include mat.icon-theme($light-theme);
@include mat.icon-button-theme($light-theme);
@include mat.input-theme($light-theme);
@include mat.list-theme($light-theme);
@include mat.sidenav-theme($light-theme);
@include mat.snack-bar-theme($light-theme);
@include mat.toolbar-theme($light-theme);

@media screen and (prefers-color-scheme: dark) {
  @include mat.core-color($dark-theme);
  @include mat.ripple-color($dark-theme);
  @include mat.button-color($dark-theme);
  @include mat.divider-color($dark-theme);
  @include mat.form-field-color($dark-theme);
  @include mat.icon-color($dark-theme);
  @include mat.icon-button-color($dark-theme);
  @include mat.input-color($dark-theme);
  @include mat.list-color($dark-theme);
  @include mat.sidenav-color($dark-theme);
  @include mat.snack-bar-color($dark-theme);
}

/* You can add global styles to this file, and also import other style files */

*,
*::before,
*::after {
  box-sizing: border-box;
}

:root {
  color-scheme: light dark;

  --color-link: #{mat.get-color-from-palette($light-primary, 800)};

  @media screen and (prefers-color-scheme: dark) {
    --color-link: #{mat.get-color-from-palette($dark-primary, 200)};
  }
}

html,
body {
  height: 100%;
}

body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}

a {
  color: var(--color-link);
}

/* Classes */

// See https://m2.material.io/design/layout/responsive-layout-grid.html#breakpoints
.container {
  margin-inline: 16px;

  @media screen and (min-wdith: 600px) {
    margin-inline: 32px;
  }

  @media screen and (min-width: 905px) {
    margin-inline: auto;
    width: 840px;
  }

  @media screen and (min-width: 1240px) {
    margin-line: 200px;
  }

  @media screen and (min-width: 1440px) {
    margin-inline: auto;
    width: 1040px;
  }

  &.narrow {
    max-width: 400px;
  }
}

@media screen and (prefers-reduced-motion: reduce) {
  .safe-motion {
    animation: none !important;
    transition: none !important;
  }
}
